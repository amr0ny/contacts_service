import config, { logger } from './config';
import { Context, NextFunction, Keyboard, Bot, InlineKeyboard } from 'grammy';
import { type Other } from 'grammy/out/core/api.d';
import { type RawApi } from 'grammy/out/core/client.d';
import { type Conversation, type ConversationFlavor } from '@grammyjs/conversations';
import { ContactPresentable } from './schemas';
import { apiService } from './requests/apiService';
import { getRequestWord } from './utils/wording';
import { CallbackQuery } from "@grammyjs/types";


export type BotContext = Context &
  ConversationFlavor;

const sendLargeMessageContacts = (bot: Bot<BotContext>, limit: number) => async (
  chatId: string | number,
  contacts: ContactPresentable[],
  cityName: string,
  reply_markup: Other<RawApi, 'sendMessage', 'chat_id' | 'text'> | undefined
) => {
  let currentMessage = `üìã –°–ø–∏—Å–æ–∫ –†–ü–ö –≤ –≥–æ—Ä–æ–¥–µ ${cityName}:\n\n`;

  const formatValue = (value: any): string | null => {
    if (value === null || value === undefined || String(value).toLowerCase() === 'nan') {
      return null;
    }
    return String(value);
  };

  for (let i = 0; i < contacts.length; i++) {
    const contact = contacts[i];
    const contactParts = [
      formatValue(contact.name) ? `${formatValue(contact.name)}` : null,
      formatValue(contact.description) ? `${formatValue(contact.description)}` : null,
      formatValue(contact.city) ? `${formatValue(contact.city)}` : null,
      contact.phone_1 ? formatValue(parseFloat(contact.phone_1).toString()) : null
    ].filter(Boolean);

    const contactInfo = contactParts.join(' ‚Äì ') + '\n\n';

    if (currentMessage.length + contactInfo.length > limit) {
      await bot.api.sendMessage(chatId, currentMessage.trim(), {});
      currentMessage = contactInfo;
    } else {
      currentMessage += contactInfo;
    }
  }

  // Send the last message with reply_markup
  if (currentMessage.trim()) {
    await bot.api.sendMessage(chatId, currentMessage.trim(), reply_markup);
  }
};

const TELEGRAM_MESSAGE_LIMIT = 4096;
export const bot = new Bot<BotContext>(config.token);

const createMainKeyboard = () => new Keyboard()
  .text('üîç –ü–æ–∏—Å–∫').text('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞')
  .row().text('‚ùì –ü–æ–º–æ—â—å').text('üë§ –ê–∫–∫–∞—É–Ω—Ç')
  .resized();

export const userCheckMiddleware = async (ctx: BotContext, next: NextFunction) => {
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
    return;
  }

  const user = await apiService.fetchUser({ userId });
  if (!user || Object.keys(user).length === 0) {
    await ctx.reply('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ /start');
    return;
  }

  await next();
};

export const accessCheckMiddleware = async (ctx: BotContext, next: NextFunction) => {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
      return;
    }

    const user = await apiService.fetchUser({ userId });
    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start');
      return;
    }

    const now = new Date();
    const expirationDate = user.subscription_expiration_date
      ? new Date(user.subscription_expiration_date)
      : undefined; // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É

    if (user.trial_state > 0) {
      if (expirationDate) {
        if (expirationDate > now) {
          await next();
          await apiService.updateUser(userId, { trial_state: user.trial_state - 1 });
        } else {
          ctx.reply('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.');
        }
      } else {
        await next()
        await apiService.updateUser(userId, { trial_state: user.trial_state - 1 });
      }
    } else {
      if (expirationDate) {
        if (expirationDate > now) {
          await ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.');
          return;
        }
      }
      else {
        await ctx.reply('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.')
      }
    }
  } catch (error) {
    logger.error('Error in accessCheckMiddleware:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  }
};


export const handleStartCommand = async (ctx: BotContext) => {
  try {
    const userId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!userId || !chatId) throw new Error('User or chat id is undefined');
    let user = await apiService.fetchUser({ userId });
    if (!user) {
      user = await apiService.createUser({
        user_id: userId,
        username: ctx.from?.username ?? '',
        first_name: ctx.from?.first_name ?? undefined,
        last_name: ctx.from?.last_name ?? undefined,
        trial_state: config.userTrialState
      });
      if (!user) throw new Error('Failed to create user');
      await ctx.reply(`üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –†–ü–ö!

üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search ‚Äì –ü–æ–∏—Å–∫ –†–ü–ö –ø–æ –≥–æ—Ä–æ–¥—É
/account ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
/subscription ‚Äì –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

üéÅ –£ –≤–∞—Å ${user.trial_state} ${getRequestWord(user.trial_state)}.
–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!`, { reply_markup: createMainKeyboard() });
    } else {
      await ctx.reply(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!


üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search ‚Äì –ü–æ–∏—Å–∫ –†–ü–ö –ø–æ –≥–æ—Ä–æ–¥—É
/account ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
/subscription ‚Äì –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏

${user.subscription_expiration_date ? `‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${user.trial_state}` : ''}
–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!`, { reply_markup: createMainKeyboard() });
    }
  } catch (e) {
    logger.error(`An error occurred while starting bot communication: ${e}`);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.').catch((replyError) => logger.error(`Failed to send error message to user: ${replyError}`));
  }
};
export const handleContactsCommand = async (conversation: Conversation<BotContext>, ctx: BotContext) => {
  try {
    await ctx.reply('üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:', {
      reply_markup: new Keyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥').resized(),
    });

    const { message } = await conversation.wait();

    if (!message?.text) {
      await ctx.reply('üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /search.', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    const userResponse = message.text.trim();

    if (userResponse === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      await ctx.reply('üëå –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    if (!userResponse) {
      await ctx.reply('‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /search.', {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    const contacts = await apiService.fetchContactsByCity({ cityName: userResponse });

    if (contacts.length === 0) {
      await ctx.reply(`üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –†–ü–ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${userResponse}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, {
        reply_markup: createMainKeyboard(),
      });
      return;
    }

    const chatId = ctx.chat?.id;
    if (!chatId) {
      throw new Error('Chat ID not found');
    }

    const sendMessage = sendLargeMessageContacts(bot, TELEGRAM_MESSAGE_LIMIT);  // 4096 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    await sendMessage(chatId, contacts, userResponse, {
      reply_markup: createMainKeyboard(),
    });
  } catch (error) {
    logger.error(`An error occurred while handling the contacts command: ${error}`);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
      reply_markup: createMainKeyboard(),
    });
  }
};

export const handleHelpCommand = async (ctx: BotContext) => {
  await ctx.reply(`‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîç /search - –ü–æ–∏—Å–∫ –†–ü–ö –ø–æ –≥–æ—Ä–æ–¥—É
üí≥ /subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
üë§ /account - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`);
};
export const handleSubscriptionCommand = async (ctx: BotContext) => {
  await ctx.conversation.enter('subscriptionConversation');
};

export const handleSubscriptionConversation = async (conversation: Conversation<BotContext>, ctx: BotContext) => {
  // –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
  await ctx.reply(`üéÅ –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${config.userTrialState} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö ${getRequestWord(config.userTrialState)}.

üíº –î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:`, {
    reply_markup: new InlineKeyboard()
      .text(`‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ ${parseFloat((config.paymentAmount / 100).toString()).toString()} ‚ÇΩ`, 'confirm_subscription')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_subscription')
  });

  // –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
  const response = await conversation.waitForCallbackQuery(['confirm_subscription', 'cancel_subscription']);

  if (response.callbackQuery.data === 'cancel_subscription') {
    await ctx.answerCallbackQuery();
    await ctx.reply('üö´ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    return;
  }

  await ctx.answerCallbackQuery();

  // –®–∞–≥ 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
  await ctx.reply('üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:');

  const { message } = await conversation.wait();

  if (!message?.text) {
    await ctx.reply('üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  const email = message.text.trim();

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
  if (!email.includes('@') || !email.includes('.')) {
    await ctx.reply('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply('ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  try {
    await apiService.updateUser(userId, { email: email });

    const user = await apiService.fetchUser({ userId });
    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start');
      return;
    }

    if (user.subscription_expiration_date && new Date(user.subscription_expiration_date) > new Date()) {
      await ctx.reply('‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.');
      return;
    }

    const res = await apiService.initUserPayment({ userId: userId, email: email });
    if (!res || !res.payment_url) {
      throw new Error('Payment link is unavailable');
    }

    await ctx.reply('üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –†–§', {
      reply_markup: new InlineKeyboard().url('üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', res.payment_url)
    });

  } catch (error) {
    logger.error(`An error occurred while handling subscription process: ${error}`);
    await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
};

export const handleAccountCommand = async (ctx: BotContext) => {
  try {
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
      return;
    }

    const user = await apiService.fetchUser({ userId });

    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start');
      return;
    }

    const now = new Date();
    const subscriptionExpirationDate = user.subscription_expiration_date
      ? new Date(user.subscription_expiration_date)
      : null;

    let subscriptionStatus = '';
    if (subscriptionExpirationDate && subscriptionExpirationDate > now) {
      subscriptionStatus = '–ê–∫—Ç–∏–≤–Ω–∞';
    } else {
      subscriptionStatus = '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞';
    }

    const formatDate = (date: Date): string => {
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return `${day}.${month}.${year}`;
    };

    const expirationMessage = subscriptionExpirationDate
      ? `üìÖ  –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: ${formatDate(subscriptionExpirationDate)}`
      : '';

    const message = `
üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> ${subscriptionStatus}
üìÖ <b>${expirationMessage}</b>
üîÑ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b> ${user.trial_state}
    `;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    logger.error('Error in handleAccountCommand:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  }
};