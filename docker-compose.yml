services:
  postgres:
    image: postgres:16
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    expose:
      - ${POSTGRES_PORT}
    env_file:
      - .env
  bot:
    build: ./contact_bot
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./contact_bot/logs:/opt/app/logs
    depends_on:
      - api
  api:
    build: ./api
    env_file:
      - .env
    restart: unless-stopped
    expose:
      - ${API_PORT}
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - ./api/logs:/opt/app/logs
    depends_on:
      - admin
      - postgres
  admin:
    build:
      context: admin
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./admin/static:/var/www/:rw
    expose:
      - "80"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./admin/static:/var/www/:ro
      - certbot_etc:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - admin
      - api
      - certbot
  db_cleaner:
    build: ./cleaner
    env_file:
      - .env
    restart: always
    volumes:
      - ./cleaner/logs:/opt/app/logs
    depends_on:
      - admin
      - postgres
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done;'"
volumes:
  postgres_data:
  certbot_etc:
  certbot_www:
